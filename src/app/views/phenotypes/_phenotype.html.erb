<div id="<%= dom_id phenotype %>">

  <div class='float-end'>
    <%# link_to "GWAS analysis", gwas_analysis_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => 'btn btn-primary'} %>
    <%# link_to "Compute correlation", compute_correlation_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => 'btn btn-primary'} %>

    <% if curator? %>
    <%= link_to "Edit", edit_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :class => 'btn btn-success'} %>
    <% end %>
    <%= link_to "All phenotypes", phenotypes_path, {:data => {:turbo => false}, :class => 'btn btn-secondary'} %>
  </div>
  
  <h1><%= phenotype.name %> phenotype</h1>

  <% if phenotype.obsolete == true %>
  <div class='alert alert-warning'>WARNING: This phenotype was deactivated and thus is considered as obsolete.</div>
  <% end %>

  <div class='row'>
    <div class='col-md-8'>

      <div id='phenotype_description_card' class='card mb-2'>
	<div class='card-body'>
	  <div class='float-end'>
	    <span class='badge bg-info'><%= (phenotype.is_summary == true) ? 'Summary' : 'By sample' %></span>
	    <span class='badge bg-info'><%= (phenotype.is_continuous == true) ? 'Continuous' : 'Discrete' %></span>
	    <span class='badge bg-info'><%= (phenotype.is_numeric == true) ? 'Numeric' : 'Text' %></span>
	  </div>
	  <h5>Description</h5>
	  <p style="margin-bottom:30px; margin-top:20px;"><%= raw phenotype.description %> <%= (u = phenotype.unit) ? "[#{u.label_html}]" : "[No unit]" %></p>
	</div>
      </div>
      <div id='study_card' class='card mb-2'>
        <div class='card-body'>
          <div class='float-end'>
            <%= link_to "Go to study", study_path(phenotype.study), {:data => {:turbo => false}, :class => 'btn btn-secondary'} %>
          </div>
          <h5>Defined in study</h5>
          <% study = phenotype.study %>
          <%= raw display_reference(study) %>
        </div>
      </div>

    </div>
    
    <div id='right_panel' class='col-md-4'>
      
      <div class='card mb-2'>
	<div class='card-body'>
	  <h5>Downloads</h5>	  
	  <div class='float-begin'>
	     <%= link_to raw("<i class='fa fa-download'></i> All data [JSON]"), phenotype_path(@phenotype, :format => 'json'), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => ''} %><br/>
	    <% type = (phenotype.is_summary) ? ((st= phenotype.summary_type) ? st.name : 'NA') : 'by sample' %>
	    <%= link_to raw("<i class='fa fa-download'></i> Original data (#{type}) [TSV]"), download_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => ''} %><br/>
	    <% @list_sum_types.each_with_index do |e, i| %>
            <%= link_to raw("<i class='fa fa-download'></i> #{e.capitalize} data [TSV]"), download_phenotype_path(@phenotype, {:s_i => i}), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => ''} %><br/>
            <% end %>
	  </div>
	  
	</div>
      </div>
            
      <div class='card mb-2'>
	<div class='card-body'>
	  <h5>Analyses</h5>
          <div class='float-begin'>
            <%= link_to raw("<i class='fa fa-tools'></i> GWAS analysis"), gwas_analysis_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => ''} %><br/>
            <%= link_to raw("<i class='fa fa-tools'></i> Correlation with other phenotypes"), compute_correlation_phenotype_path(@phenotype), {:data => {:turbo => 'false', :method => 'get'}, :target => "_blank", :class => ''} %>
	  </div>
	  
	</div>
      </div>
            
    </div>
</div>
  

  
  <%# render :partial => 'values' %>
  
  <div class='card mb-2'>
    <div class='card-body'>
      <h5>Values</h5>
      <!-- Type: <%= phenotype.is_numeric == true ? 'Numeric' : 'Text' %> <br/> -->
      <!-- Summary: <%= @is_summary %> -->
      <%# @sex_list.to_json %>

      <%# @all_dgrp_lines.to_json %>
      <%#  (0 .. @all_dgrp_lines.size-1).to_a.to_json %>
      <%# @mean_vector.to_json %>
      <%# @h_mean_values.to_json %>
      <%# @h_mean_values['M'].keys.map{|k| @h_mean_values['M'][k].is_a? Float}.to_json %>
      <%# @global_ordered_index['M'].map{|i| }.to_json %>
      <%# @global_ordered_index['M'].map{|i| @all_dgrp_lines[i] + ": " + @h_mean_values['M'][@all_dgrp_lines[i]].to_s}.to_json %><%# .map{|i| dgrp_lines[i]}.to_json %>
      <%# (0 .. @all_dgrp_lines.size-1).to_a.sort{|a, b| (@h_mean_values['F'][@all_dgrp_lines[a]] || 0) <=> (@h_mean_values['F'][@all_dgrp_lines[a]] || 0)} %>
      <%# (0 .. @all_dgrp_lines.size-1).to_a.sort{|a, b| (@h_mean_values['M'][@all_dgrp_lines[a]] || 0) <=> (@mean_vector['M'][@all_dgrp_lines[b]] || 0)}.to_json %>
      <% h_invariants = {} %>
      <% (@h_all_sex.keys - @sex_list).each do |s| %>
      <div class='alert alert-warning'>Only NA values for <%= @h_sex[s] %>.</div> 
      <% end %>
      <% @sex_list.each_index do |i| %>
     
      <% vals = @mean_vector[@sex_list[i]] %> <%# @h_pheno_sum.keys.map{|k| (@h_pheno_sum[k][phenotype.id.to_s]) ? @h_pheno_sum[k][phenotype.id.to_s][i] : nil}.flatten.compact %>
      <%# vals.uniq.to_json if admin? %>
      <%# vals.to_json %>
      <%# nas = vals.size - vals.compact.size %>
      <% if vals and vals.uniq.size ==1 %>
       <% h_invariants[@sex_list[i]] = vals[0] %> 
      <% end %>
      Number of mean values for <%= @h_sex[@sex_list[i]] %>: <%= vals.compact.size %> <%= (@h_nas[@sex_list[i]] > 0) ? "(+#{@h_nas[@sex_list[i]]} NAs)" : "" %><br/>
      Number of mean unique values for <%= @h_sex[@sex_list[i]] %>: <%= vals.uniq.size %> <%# vals.uniq.to_json %><br/>
      <% end %>
      <% if h_invariants.keys.size > 0 %>
       <div class='alert bg-warning'>Mean values are invariants across DGRP lines in <%= h_invariants.keys.map{|e| @h_sex[e] + " (equals to #{h_invariants[e]})"}.join(",").gsub(/, (\w+\(\.+?\))$/, 'and /1') %>.</div> 
      <% end %>
      <%# @h_pheno.each_key do |dgrp_line|
	# tmp_sex = @h_pheno[dgrp_line]['sex']
        #  tmp_sex.each_index do |i|
        #if @h_pheno[dgrp_line][phenotype.name]
        # if @h_pheno[dgrp_line][phenotype.name][i] %>
      <%#  tmp_sex[i] %>
      <%# else %>
      <%# tmp_sex[i] %><%# @h_pheno[dgrp_line][phenotype.name].to_json %>
      <%# end
	 end
	 end
	 end %>
      <%# @h_pheno.keys %>
      <%# @h_pheno_sum["DGRP_802"]['sex'].to_json %>
      <%# @h_pheno_sum["DGRP_802"][phenotype.name].to_json %>
      
      <%# @mean_vector %>
      <%# @sex_list.to_json %>
      <%# @sex_list.each_index do |i| %>
      <%# i %>  <%# @sex_list[i] %>  
      <%# @h_pheno_sum.to_json %> <%# .keys.map{|k| (@h_pheno[k][phenotype.id.to_s]) ? @h_pheno[k][phenotype.id.to_s][i] : nil}.to_json %>
      
      <%# end %>

      <!-- <br/><BR/> -->
      <%# @h_pheno.keys.map{|k| [@h_pheno[k]['sex'], @h_pheno[k][phenotype.name]]}.to_json %>
      <%# @all_dgrp_lines.size %>     
      <%# @global_ordered_index['F'].size %>
      <%# @global_ordered_index['M'].size %>
      <%# @errors.to_json %>
      <%# @h_pheno.keys.map{|k| @h_pheno[k][phenotype.name]}.to_json %>
      <%# @h_pheno_sum["DGRP_021"].to_json %>
      <%# @h_pheno.sum.keys.map{|k| @h_pheno_sum[k][phenotype.id.to_s]}.to_json %>
      <%# @h_pheno.to_json %>
      <%# @mean_vector.to_json %>
      <% if phenotype.is_numeric == true and  phenotype.is_continuous %>
      <div class='mt-3 mb-3'>
	<% if @sex_list.size > 1 %>
	Set number of bins for histograms [value = <span id='nber_bins'><%= params[:nber_bins] %></span>]
	<div id="bin_slider" class='slider mt-2'></div>
	<% end %>
	<% @sex_list.select{|sex| @mean_vector[sex]}.each do |sex| %>
	<div class='card float-begin col-md-6'>
	  <div class='card-header'>
	    <div class='float-end'>
              <%= raw download_buttons("distri_plot_" + sex) %>
            </div>
	  </div>
	  <div class='card-body'>
	    <div id='distri_plot_<%= sex %>'></div>
	  </div>
	</div>
	<% end %>
	<% if @sex_list.size > 1 %>
	<div class='alert bg-secondary text-light'><i class='fa fa-lightbulb'></i> In the plot below you can visualize only one sex by clicking on the corresponding legend.</div>
	<% end %>
      </div>
      <% end %>
      <% if phenotype.is_continuous %>
      <% if  @mean_vector.keys.select{|k| @mean_vector[k].size > 0}.size > 0 %>
      <% if @sex_list.size > 1 %>
        Order DGRP lines according to median values for
       <%= select_tag "dgrp_order", options_for_select(@sex_list, params[:dgrp_order]), {:class => 'plot_param form-inline'} %> samples
       <% end %>
      <% if phenotype.is_summary == true %>
       <%# @ordered_index['M'].to_json %>
       <%# @ordered_index['M'].map{|i| @mean_vector['M'][i]}.to_json %>
       <%# @ordered_index['M'].map{|i| @dgrp_lines['M'][i]}.to_json %>
       <div id='container_ordered_plot' class='card col-md-12'>
         <div class='card-header'>
	   <div class='float-end'>
	     <%= raw download_buttons("ordered_plot") %>
	   </div>
	 </div>
         <div class='card-body'>
	   <div id='ordered_plot'></div>
	 </div>
       </div>
       <%= text_field_tag 'ordered_plot_caption', ((@h_figures[:ordered_plot]) ? @h_figures[:ordered_plot].caption : ''), {:class => 'form-control'} %>
       <% else %>
       <div id='container_ordered_boxplot' class='card col-md-12'>
         <div class='card-header'>
	    <div class='float-end'>
             <%= raw download_buttons("ordered_boxplot") %>
           </div>
         </div>
         <div class='card-body'>
	   <div id='ordered_boxplot'></div>
	 </div>
       </div>
       
       Display <%= select_tag "displayed_sum_type", options_for_select((0 .. @list_sum_types.size-1).to_a.map{|i| [@list_sum_types[i], i]}, params[:displayed_sum_type]), {:class => 'barplot_param form-inline'} %> and sort by <%= select_tag "dgrp_order_barplot", options_for_select(@sex_list, params[:dgrp_order_barplot]), {:class => 'barplot_param form-inline'} %> samples
       <div id='container_ordered_barplot' class='card col-md-12'>
         <div class='card-header'>
	   <div class='float-end'>
             <%= raw download_buttons("ordered_barplot") %>
           </div>
         </div>
         <div class='card-body'>
	   <div id='ordered_barplot'></div>
	 </div>
       </div>
       <% end %>
	<% end %>
       <% else %>
       <% @sex_list.select{|sex| @mean_vector[sex]}.each do |sex| %>
       <div class='card col-md-12'>
         <div class='card-header'>
	    <div class='float-end'>
             <%= raw download_buttons("bar_plot_" + sex) %>
           </div>
         </div>
         <div class='card-body'>
           <div id='bar_plot_<%= sex %>'></div>
	 </div>
       </div>
       <% end %>
       
       <% end %>
       <%# end %>
       <%# end %>
    </div>
  </div>
  
</div>

<%= javascript_tag do %>

//  var h_plots = {}

  document.addEventListener('DOMContentLoaded', function () {

 var w = $(window).width()

  $("#study_card").height($("#right_panel").height() - $("#phenotype_description_card").height()-20) 

  var opt = {
  modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'],
  modeBarButtonsToAdd: [
  {
    name: 'Save PNG',
    icon: Plotly.Icons.camera,
    click: function(gd) {
      Plotly.downloadImage(gd, {format: 'png', height:1200,width:1200})
    }
  },
 {
    name: 'Save SVG',
    icon: Plotly.Icons.camera,
    click: function(gd) {
      Plotly.downloadImage(gd, {format: 'svg', height:600,width:600})
    }
  }]
}

$(".download-btn").click(function(){
var t = this.id.split("_")
t.shift()
var id = t.join("_")
var plot = document.getElementById(id)
var data = plot.data
console.log(data)
var filename = "phenotype_<%= phenotype.id %>_" + id + ".txt";
//console.log(filename)
var t_header = ["trace", "x"]
var complement_header = ["y", "text"]
for (var i=0; i < complement_header.length; i++){
		  if (data[0][complement_header[i]]){
		  t_header.push(complement_header[i])
		  }
		  }
var text = t_header.join("\t") + "\n";

for (var i=0; i < data.length; i++){
		  var trace_name = (data[i]['name']) ? data[i]['name'] : i+1
		  for (var j=0; j < data[i]["x"].length; j++){
				    
		  t = [trace_name, data[i]["x"][j], ((data[i]["y"]) ? data[i]["y"][j] : ''), ((data[i]["text"]) ? data[i]["text"][j] : '')]
		  text += t.join("\t") + "\n"
		 // console.log(t)
		  }
}
var blob = new Blob([text], {type:'text/plain'});
var link = document.createElement("a");
link.download = filename;
link.innerHTML = "Download File";
link.href = window.URL.createObjectURL(blob);
link.style = "color:white"
document.body.appendChild(link);
 link.click();
        setTimeout(() => {
            document.body.removeChild(link);
            window.URL.revokeObjectURL(link.href);
        }, 100);
 })


  $(".save-svg-btn").click(function(){
                                      //console.log(this)
                                     // console.log($(this).attr("id"));
var t = this.id.split("_")
t.shift()
 var id = t.join("_")
 console.log("ID:" + id)
 $("#" + id + " .modebar-btn").each(function(){
  let e = $( this ).attr("data-title")
  console.log(e) 
  if (e == 'Save SVG'){
   this.click();
  }
  })

 })

  $(".save-png-btn").click(function(){
                                      //console.log(this)
                                     // console.log($(this).attr("id"));
var t = this.id.split("_")
t.shift()
 var id = t.join("_")
 console.log("ID: " + id)
 $("#" + id + " .modebar-btn").each(function(){
  let e = $( this ).attr("data-title")
  console.log(e)
  if (e == 'Save PNG'){
   this.click();
  }
  })

 })


<% if phenotype.is_continuous == true and phenotype.is_numeric == true %>

//  $(function(){
$("#bin_slider").slider({
      min: 0,
max: 1000,
value : <%= params[:nber_bins] %>,
      slide: function( event, ui ) {
$("#nber_bins").html(ui.value)       
},
change: function(e,ui){
//window.location="<%= phenotype_path(phenotype) %>?nber_bins=" + ui.value + "&dgrp_order=<%= params[:dgrp_order] %>"
refresh(null, "<%= raw phenotype_path(phenotype) %>?nber_bins=" + ui.value + "&partial=distri_plots_js&dgrp_order=<%= params[:dgrp_order] %>", {loading:'fa-2x'})
}
});
//  });

$(".plot_param").change(function(){
 <% if phenotype.is_summary == true %>
 refresh(null, "<%= raw phenotype_path(phenotype) %>?nber_bins=<%= params[:nber_bins] %>&dgrp_order=" + $("#dgrp_order").val() + "&dgrp_order_barplot=" + $("#dgrp_order_barplot").val() + "&displayed_sum_type=" + $("#displayed_sum_type").val() + "&partial=ordered_plot_js", {loading:'fa-2x'})
 <% else %>
  refresh(null, "<%= raw phenotype_path(phenotype) %>?nber_bins=<%= params[:nber_bins] %>&dgrp_order=" + $("#dgrp_order").val() + "&dgrp_order_barplot=" + $("#dgrp_order_barplot").val() + "&displayed_sum_type=" + $("#displayed_sum_type").val() + "&partial=ordered_boxplot_js", {loading:'fa-2x'})
 <% end %>
})
$(".barplot_param").change(function(){
refresh(null, "<%= raw phenotype_path(phenotype) %>?nber_bins=<%= params[:nber_bins] %>&dgrp_order=" + $("#dgrp_order").val() + "&dgrp_order_barplot=" + $("#dgrp_order_barplot").val() + "&displayed_sum_type=" + $("#displayed_sum_type").val() + "&partial=ordered_barplot_js", {loading:'fa-2x'})
//window.location="<%= phenotype_path(phenotype) %>?nber_bins=<%= params[:nber_bins] %>&dgrp_order=" + $("#dgrp_order").val() + "&dgrp_order_barplot=" + $("#dgrp_order_barplot").val() + "&displayed_sum_type=" + $("#displayed_sum_type").val()
})

 <% end %>

function draw_plots(){
 
 <% if phenotype.is_continuous == true and phenotype.is_numeric == true %>
 
<%= render :partial => 'distri_plots_js', :locals => {:phenotype => phenotype} %>

<% end %>

<% if phenotype.is_continuous == true %>
 <% if phenotype.is_summary == false %>

 <%= render :partial => 'ordered_boxplot_js', :locals => {:ordered_index => @global_ordered_index, :h_mean_values => @h_mean_values, :h_pheno => @h_pheno, :dgrp_lines => @all_dgrp_lines, :phenotype => phenotype} %>
 <%= render :partial => 'ordered_barplot_js', :locals => {:ordered_index => @global_ordered_index_barplot, :h_sum_values => @h_sum_values, :h_pheno => @h_pheno, :dgrp_lines => @all_dgrp_lines, :phenotype => phenotype} %>

<% elsif phenotype.is_numeric == true %>

 <%= render :partial => 'ordered_plot_js', :locals => {:ordered_index => @global_ordered_index, :h_mean_values => @h_mean_values, :sex_list => @sex_list, :dgrp_lines => @all_dgrp_lines, :mean_vector => @mean_vector, :phenotype => phenotype} %>

<% end %>
<% else %>

<% @sex_list.each do |sex| %>
<% if @mean_vector[sex].size > 0 %>

<% h_uniq_vals = {} %>
<% @mean_vector[sex].map{|e| h_uniq_vals[e.to_s]||=0; h_uniq_vals[e.to_s]+=1} %>
var data = [
  {
x: <%= raw uniq_vals = @mean_vector[sex].uniq.compact.map{|e| e.to_s} %>,
y: <%= raw uniq_vals.map{|e| h_uniq_vals[e]} %>,
    type: 'bar',
    marker: {
     color: '<%= @h_sex_color[sex] %>',
    }
  }
];

var layout = {
title : 'Barplot for unique <%= (phenotype.is_summary) ? '' : 'mean ' %>values for <%= @h_sex[sex] %>',
xaxis : {type : 'category', showticklabels: (<%= uniq_vals.size %> > w * 60 / 1470) ? false : true}
}
console.log("toto:" + w * 60 / 1470)
Plotly.newPlot('bar_plot_<%= sex %>', data, layout, opt);
<% end %>
<% end %>
<% end %>

}

draw_plots();

 window.addEventListener('resize', function(){draw_plots()});



})


<% end %>
